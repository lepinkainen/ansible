---
- name: Safely upgrade Debian servers to Trixie (Debian 13)
  hosts: debian_servers
  gather_facts: true
  become: true
  serial: 1  # Upgrade one server at a time for safety

  vars:
    target_codename: "trixie"
    target_version: "13"

  pre_tasks:
    - name: Check current Debian version
      command: lsb_release -sc
      register: current_codename
      changed_when: false

    - name: Skip if already on target version
      meta: end_host
      when: current_codename.stdout == target_codename

    - name: Display upgrade information
      debug:
        msg:
          - "=== DEBIAN UPGRADE PLAN ==="
          - "Host: {{ inventory_hostname }}"
          - "Current: {{ current_codename.stdout }}"
          - "Target: {{ target_codename }}"
          - "This will upgrade the distribution in place"

    - name: Confirm upgrade intent (pause in check mode)
      pause:
        prompt: |
          WARNING: This will upgrade {{ inventory_hostname }} from {{ current_codename.stdout }} to {{ target_codename }}.

          This is a major operation that will:
          1. Update all packages to latest versions
          2. Upgrade the distribution to Debian 13 (Trixie)
          3. May require system reboot
          4. Could take significant time

          Ensure you have:
          - Recent backups
          - Console access if SSH fails
          - Scheduled maintenance window

          Press ENTER to continue or Ctrl+C to abort
      when: not ansible_check_mode

  tasks:
    - name: Create backup of sources.list
      copy:
        src: /etc/apt/sources.list
        dest: "/etc/apt/sources.list.backup.{{ ansible_date_time.epoch }}"
        remote_src: true
        backup: true
      tags: [backup]

    - name: Update package cache
      apt:
        update_cache: true
        cache_valid_time: 0
      tags: [update]

    - name: Upgrade all packages to latest for current distribution
      apt:
        upgrade: full
        autoremove: true
        autoclean: true
      register: pre_upgrade_result
      tags: [upgrade]

    - name: Update sources.list for Trixie
      replace:
        path: /etc/apt/sources.list
        regexp: '{{ current_codename.stdout }}'
        replace: '{{ target_codename }}'
        backup: true
      register: sources_updated
      tags: [sources]

    - name: Update sources.list.d files for Trixie
      replace:
        path: "{{ item }}"
        regexp: '{{ current_codename.stdout }}'
        replace: '{{ target_codename }}'
        backup: true
      with_fileglob:
        - "/etc/apt/sources.list.d/*.list"
      register: sources_d_updated
      tags: [sources]

    - name: Update package cache after sources change
      apt:
        update_cache: true
        cache_valid_time: 0
      when: sources_updated.changed or sources_d_updated.changed
      tags: [update]

    - name: Perform distribution upgrade
      apt:
        upgrade: dist
        autoremove: true
        autoclean: true
      register: dist_upgrade_result
      tags: [dist-upgrade]

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      tags: [reboot-check]

    - name: Display reboot requirement
      debug:
        msg:
          - "Reboot required: {{ reboot_required.stat.exists }}"
          - "File exists: {{ reboot_required.stat.exists }}"
      tags: [reboot-check]

  post_tasks:
    - name: Verify upgrade success
      command: lsb_release -sc
      register: final_codename
      changed_when: false
      tags: [verify]

    - name: Display upgrade results
      debug:
        msg:
          - "=== UPGRADE COMPLETE ==="
          - "Host: {{ inventory_hostname }}"
          - "Original version: {{ current_codename.stdout }}"
          - "Current version: {{ final_codename.stdout }}"
          - "Upgrade successful: {{ final_codename.stdout == target_codename }}"
          - "Reboot required: {{ reboot_required.stat.exists | default(false) }}"
          - ""
          - "{% if reboot_required.stat.exists | default(false) %}NEXT STEP: Reboot {{ inventory_hostname }} to complete upgrade{% endif %}"
      tags: [verify]

    - name: Fail if upgrade unsuccessful
      fail:
        msg: "Upgrade failed: Expected {{ target_codename }}, got {{ final_codename.stdout }}"
      when: final_codename.stdout != target_codename
      tags: [verify]

# Separate play for optional reboot
- name: Optional reboot after upgrade
  hosts: debian_servers
  gather_facts: false
  become: true
  serial: 1

  tasks:
    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot if required (with confirmation)
      block:
        - name: Confirm reboot
          pause:
            prompt: |
              {{ inventory_hostname }} requires a reboot to complete the upgrade.

              Press ENTER to reboot now, or Ctrl+C to skip (you can reboot manually later)
          when: not ansible_check_mode

        - name: Reboot the server
          reboot:
            reboot_timeout: 600
            connect_timeout: 20
            test_command: uptime
          when: not ansible_check_mode

        - name: Wait for server to come back online
          wait_for_connection:
            delay: 30
            timeout: 300
          when: not ansible_check_mode

        - name: Verify system is operational after reboot
          command: uptime
          register: uptime_result
          changed_when: false
          when: not ansible_check_mode

        - name: Display post-reboot status
          debug:
            msg:
              - "{{ inventory_hostname }} rebooted successfully"
              - "System uptime: {{ uptime_result.stdout | default('N/A (check mode)') }}"
          when: not ansible_check_mode

      when: reboot_required.stat.exists