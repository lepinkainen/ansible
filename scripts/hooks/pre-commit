#!/bin/bash

# Pre-commit hook to ensure all sensitive files are encrypted with ansible-vault
# Uses ansible.cfg configuration for vault password

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() { echo -e "${BLUE}[INFO]${NC} ${1:-}"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} ${1:-}"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} ${1:-}"; }
print_error() { echo -e "${RED}[ERROR]${NC} ${1:-}"; }

# Sensitive file patterns that must be encrypted
SENSITIVE_PATTERNS=(
    "inventory/production.yml"
    "inventory/group_vars/.*/vault\.yml"
    "inventory/host_vars/.*/vault\.yml"
)

# Function to check if file is encrypted with ansible-vault
is_encrypted() {
    local file="$1"
    [[ -f "$file" ]] && head -1 "$file" | grep -q '^\$ANSIBLE_VAULT'
}

# Function to check if file matches sensitive patterns
is_sensitive_file() {
    local file="$1"
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if [[ "$file" =~ $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# Main function
main() {
    local exit_code=0
    local unencrypted_files=()
    local checked_files=0
    
    # Get list of staged files
    local staged_files=()
    while IFS= read -r file; do
        staged_files+=("$file")
    done < <(git diff --cached --name-only --diff-filter=ACM)
    
    if [[ ${#staged_files[@]} -eq 0 ]]; then
        print_info "No files staged for commit"
        exit 0
    fi
    
    print_info "Checking ${#staged_files[@]} staged files for vault encryption..."
    
    # Check each staged file
    for file in "${staged_files[@]}"; do
        if is_sensitive_file "$file"; then
            ((checked_files++))
            print_info "Checking sensitive file: $file"
            
            if [[ ! -f "$file" ]]; then
                print_warning "Sensitive file scheduled for deletion: $file"
                continue
            fi
            
            if is_encrypted "$file"; then
                print_success "✓ Encrypted: $file"
            else
                print_error "✗ UNENCRYPTED: $file"
                unencrypted_files+=("$file")
                exit_code=1
            fi
        fi
    done
    
    if [[ $checked_files -eq 0 ]]; then
        print_info "No sensitive files found in staged changes"
        exit 0
    fi
    
    # Report results
    echo
    if [[ $exit_code -eq 0 ]]; then
        print_success "All $checked_files sensitive files are properly encrypted"
    else
        print_error "Found ${#unencrypted_files[@]} unencrypted sensitive files:"
        echo
        for file in "${unencrypted_files[@]}"; do
            print_error "  - $file"
        done
        
        echo
        print_info "To fix these issues:"
        print_info "1. Encrypt individual files (uses ansible.cfg):"
        for file in "${unencrypted_files[@]}"; do
            print_info "   ansible-vault encrypt $file"
        done
        print_info
        print_info "2. Or use the bulk encryption script:"
        print_info "   ./scripts/encrypt-vault-files.sh"
        print_info
        print_info "3. Then re-stage and commit:"
        print_info "   git add ${unencrypted_files[*]}"
        print_info "   git commit"
        
        echo
        print_error "Commit rejected to protect sensitive data!"
    fi
    
    exit $exit_code
}

# Run main function
main "$@"