#!/bin/bash
#
# Dynamic MOTD for Arch Linux systems
# Generated by Ansible - motd-config role
#

{% if motd_config.enable_logo | default(true) %}
# 01-logo: Display hostname using figlet
# Get hostname using available command
if command -v hostname >/dev/null 2>&1; then
    HOSTNAME=$(hostname -s)
elif command -v hostnamectl >/dev/null 2>&1; then
    HOSTNAME=$(hostnamectl hostname)
else
    HOSTNAME=$(cat /proc/sys/kernel/hostname 2>/dev/null || echo "unknown")
fi

if command -v figlet >/dev/null 2>&1; then
    figlet "$HOSTNAME"
else
    echo "=== $HOSTNAME ==="
fi
echo
{% endif %}

{% if motd_config.enable_uname | default(true) %}
# 10-uname: Display system information
uname -snrvm
echo
{% endif %}

{% if motd_config.enable_diskspace | default(true) %}
# 15-diskspace: Display disk usage information
# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo "=== Disk Usage ==="

# Function to get disk info and format it
show_disk_usage() {
    local mount_point=$1
    local df_output=$(df -h "$mount_point" | tail -n 1)

    # Extract values using awk
    local filesystem=$(echo "$df_output" | awk '{print $1}')
    local size=$(echo "$df_output" | awk '{print $2}')
    local used=$(echo "$df_output" | awk '{print $3}')
    local avail=$(echo "$df_output" | awk '{print $4}')
    local use_percent=$(echo "$df_output" | awk '{print $5}' | tr -d '%')

    # Determine color based on usage percentage
    local color=$GREEN
    if [ "$use_percent" -ge 90 ]; then
        color=$RED
    elif [ "$use_percent" -ge 75 ]; then
        color=$YELLOW
    fi

    # Format the output
    printf "  %-10s ${color}%3s%%${NC} used  %4s / %4s  (%4s free)\n" \
           "$mount_point" "$use_percent" "$used" "$size" "$avail"
}

# Show disk usage for configured locations
{% for location in disk_usage_locations | default(['/']) %}
show_disk_usage "{{ location }}"
{% endfor %}

echo
{% endif %}

{% if motd_config.enable_docker | default(true) %}
# 20-docker: Display Docker health status
# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo "=== Docker Health Status ==="

if command -v docker >/dev/null 2>&1; then
    # Check if Docker daemon is running
    if docker info >/dev/null 2>&1; then
        # Get unhealthy containers
        unhealthy_containers=$(docker ps --filter "health=unhealthy" --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}\t{{ '{{.Image}}' }}" 2>/dev/null)

        if [ -n "$unhealthy_containers" ] && [ "$(echo "$unhealthy_containers" | wc -l)" -gt 1 ]; then
            echo -e "${RED}⚠ Unhealthy containers found:${NC}"
            echo "$unhealthy_containers" | tail -n +2 | while read -r line; do
                echo "  $line"
            done
        else
            echo -e "${GREEN}✓ All containers healthy${NC}"
        fi

        # Show total container count
        total_containers=$(docker ps -q | wc -l)
        running_containers=$(docker ps --filter "status=running" -q | wc -l)
        echo "  Total: $total_containers containers ($running_containers running)"
    else
        echo -e "${YELLOW}⚠ Docker daemon not running${NC}"
    fi
else
    echo -e "${YELLOW}⚠ Docker not installed${NC}"
fi

echo
{% endif %}

{% if motd_config.enable_security_updates | default(true) %}
# 30-security-updates: Display security update information
# Note: This is Debian-specific and may not work properly on Arch Linux
# Check for security updates specifically (Arch uses different update mechanism)
if command -v pacman >/dev/null 2>&1; then
    # Arch Linux update check using pacman
    # Note: This is a basic check and may not be 100% accurate without checkupdates
    if pacman -Qu >/dev/null 2>&1; then
        updates=$(pacman -Qu 2>/dev/null | wc -l)
        if [ "$updates" -gt 0 ]; then
            echo "=== System Updates ==="
            printf "  ⚠ %d updates available\n" "$updates"
            echo "  Run 'pacman -Syu' to update system"
            echo
        fi
    fi
elif command -v apt >/dev/null 2>&1; then
    # Debian/Ubuntu update check (fallback)
    codename=$(lsb_release -cs 2>/dev/null || echo "")
    if [ -n "$codename" ]; then
        security_updates=$(apt list --upgradable 2>/dev/null | grep -c "${codename}-security" 2>/dev/null || echo "0")
    else
        security_updates="0"
    fi
    
    # Ensure we have a valid number
    case "$security_updates" in
        ''|*[!0-9]*) security_updates="0" ;;
    esac
    
    if [ "$security_updates" -gt 0 ]; then
        echo "=== Security Updates ==="
        printf "  ⚠ %d security updates available\n" "$security_updates"
        echo "  Run 'apt upgrade' to install security updates"
        echo
    fi
fi
{% endif %}

{% if motd_config.enable_unattended_upgrades | default(true) %}
# 92-unattended-upgrades: Display unattended upgrades status
# Note: This is primarily for Debian systems
if [ -x /usr/share/unattended-upgrades/update-motd-unattended-upgrades ]; then
    /usr/share/unattended-upgrades/update-motd-unattended-upgrades
elif systemctl is-enabled --quiet pacman-auto-update.timer 2>/dev/null; then
    echo "=== Automatic Updates ==="
    echo "  ✓ Automatic updates enabled (pacman-auto-update.timer)"
    echo
fi
{% endif %}